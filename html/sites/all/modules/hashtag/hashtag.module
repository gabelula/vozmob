<?php
// $Id$

/**
 * Implements hook_nodeapi().
 */
function hashtag_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'presave') {
    if ($vid = hashtag_get_tag_vid_for_node_type($node->type)) {
      $body = decode_entities(strip_tags($node->body));
      // Hash tags may appear in the title or body.
      $tags = array_merge(hashtag_extract_tags($node->title), hashtag_extract_tags($body));
      foreach ($tags as $tag) {
        $node->taxonomy['tags'][$vid] .= ',' . $tag;
      }
    }
  }
}

/**
 * Extracts hash tags from a string as an array.
 */
function hashtag_extract_tags($string) {
  $tags = array();
  // Match valid hash tags, including non-ASCII hash tags.
  if (preg_match_all('/(?:^|\s)#([\pL\pN_.-]{1,64})/u', $string, $matches)) {
    foreach ($matches[1] as $tag) {
      $tags[] = hashtag_canonical_tag($tag);
    }
  }
  return $tags;
}

/**
 * Returns first available free-tagging vocabulary for the node type.
 */
function hashtag_get_tag_vid_for_node_type($type) {
  foreach (taxonomy_get_vocabularies($type) as $vocabulary) {
    if ($vocabulary->tags) {
      return $vocabulary->vid;
    }
  }
  return FALSE;
}

/**
 * Returns a canonical tag, using the same logic as StatusNet.
 */
function hashtag_canonical_tag($tag) {
  $tag = mb_convert_case($tag, MB_CASE_LOWER, 'UTF-8');
  return str_replace(array('-', '_', '.'), '', $tag);
}
