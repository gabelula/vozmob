<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function bot_twitter_menu() {
  $items['admin/settings/bot/twitter'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure Bot Twitter settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_twitter_settings'),
    'title'             => 'Bot Twitter',
  );
  return $items;
}

/**
 * Harvest related Twitter feeds.
 */
function bot_twitter_irc_bot_cron_fastest() {
  $feeds = bot_twitter_get_feeds();
  while ($feed = db_fetch_object($feeds)) {
    if ($channel = variable_get('bot_twitter_channel_' . $feed->fid, '')) {
      $items = db_query('SELECT a.iid, a.fid, a.link, a.title FROM {aggregator_item} a LEFT JOIN {bot_twitter} t ON a.iid = t.iid WHERE a.fid = %d AND t.iid IS NULL ORDER BY a.timestamp asc', $feed->fid);
      while ($item = db_fetch_object($items)) {
        $link = explode('/', $item->link);
        bot_message($channel, '<' . $link[3] . '> ' . $item->title . ' ' . $item->link);
        drupal_write_record('bot_twitter', $item);
        // Follow the author, so she/he has a better chance of seeing any replies made via IRC.
        bot_twitter_follow($link[3]);
      }
    }
  }
  return $output;
}

/**
 * Build the settings form.
 */
function bot_twitter_settings() {
  $feeds = bot_twitter_get_feeds();
  $channels = preg_split('/\s*,\s*/', variable_get('bot_channels', '#test'));
  foreach ($channels as $channel) {
    list($channel) = explode(' ', $channel);
    $options[$channel] = $channel;
  }
  while ($feed = db_fetch_object($feeds)) {
    $form['bot_twitter_channel_' . $feed->fid] = array(
      '#default_value' => variable_get('bot_twitter_channel_' . $feed->fid, ''),
      '#description'   => t('Select an IRC channel to which messages from this feed will be relayed.'),
      '#title'         => t('%title channel', array('%title' => $feed->title)),
      '#type'          => 'select',
      '#options'       => $options,
    );
  }
  $form['bot_twitter_username'] = array(
    '#default_value' => variable_get('bot_twitter_username', ''),
    '#description'   => t('Enter your Twitter username.'),
    '#title'         => t('Twitter username'),
    '#type'          => 'textfield',
  );
  $form['bot_twitter_password'] = array(
    '#default_value' => variable_get('bot_twitter_password', ''),
    '#description'   => t('Enter your Twitter password.'),
    '#title'         => t('Twitter password'),
    '#type'          => 'textfield',
  );
  return system_settings_form($form);
}

/**
 * Get all search.twitter.com feeds setup in Aggregator module.
 */
function bot_twitter_get_feeds() {
  return db_query("SELECT fid FROM {aggregator_feed} WHERE url LIKE '%s'", 'http://search.twitter.com/search.atom%');
}


/**
 * Follow a Twitter user.
 */
function bot_twitter_follow($user) {
  static $users = array();
  include_once('Services/Twitter.php');
  // We only try to follow each user once per bot execution.
  if (!isset($users[$user])) {
    try {
      $twitter = new Services_Twitter(variable_get('bot_twitter_username', ''), variable_get('bot_twitter_password', ''));
      $twitter->friendships->create($user);
    }
    catch (Services_Twitter_Exception $e) {
      watchdog('bot_twitter', 'Exception: %message', array('%message' => $e->getMessage()), WATCHDOG_WARNING);
    }
    $users[$user] = TRUE;
  }
}
