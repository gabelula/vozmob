<?php
// $Id $

/**
 * Implementation of hook_media_mover().
 */
function mm_sox_media_mover($op, $action_id = null, $configuration = array(), &$item = array() ) {
  switch ($op) {
    case 'name':
      return "SoX module";

    // edit a configuration option set
    // $type is needed to build out options, is "type:action"
    // $configuration is passed in from db
    case 'config':
      switch ($action_id) {
        case '1': //convert audio
          return mm_sox_config($action_id, $configuration);
      }
      break;

    case 'admin':
      return mm_sox_admin();

    // defines what type of driver this module is
    // harvest, process, storage
    case 'verbs':
      return array('process');

    case 'actions':
      return array(
        'process' => array(
          1 => 'convert audio',
        ),
      );
      break;

    case 'directories':
      return array('sox/converted');
      break;

    case 'process':
      switch ($action_id) {
        case '1': //convert audio
          return _mm_sox_audio($item, $configuration);
      }
      break;
  }
}

/**
 * Fetch the format information table.
 */
function _mm_sox_formats() {
  static $formats;
  if (!$formats) {
    $file = fopen(drupal_get_path('module', 'mm_sox') .'/format.txt', 'r');
    while (!feof($file)) {
      $line = fgets($file, 1024);
      if ($line[0] == ';' || empty($line)) {
        // Skip comment lines.
        continue;
      }
      $format = array();
      list($format['format'], $format['extension'], $format['description'], $format['pseudo'], $format['header']) = preg_split('/\t+/', $line);
      $formats[] = $format;
    }
  }
  return $formats;
}

/**
 * Implementation of hook_help().
 */
function mm_sox_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description' :
      return t('Helper module for Media Mover. Allows users to convert audio files.');
  }
  return;
}

/* ************************************ */
/* conversion functions */
/* ************************************ */

/**
 * processes the incoming file
 * @param $file is a file array
 * @param $configuration is the configuration that governs this process
 * returns the file array
 */
function _mm_sox_audio(&$item, $configuration) {
  // check if the incoming file exists
  mm_sox_file_exists($item);
  if ($item['status'] === 0 ) {
    return;
  }

  // check to see if this file can be decoded
  if (!_mm_sox_can_decode($item['harvest']['file'])) {

    $message = t('SoX can not decode this file: %file !link', array(
      '%file' => $item['harvest']['file'],
      '!link' => l(t('media mover file'), 'admin/media_mover/file/edit/'. $item['mmfid'])
      )
    );
    $link = l("node ". $item['nid'],  "node/". $item['nid'] ."/edit");
    watchdog('media_mover', $message, 'WATCHDOG_NOTICE', $link);
    $item['status'] = 0;
    return;
  }

  // build the sox command structure out
  $options = array();

  //[ gopts ] [ fopts ] ifile [ fopts ] ofile [ effect [ effopts ] ]

  // Global options

  // Input file options

  // Input file
  $options[] = escapeshellarg($item['harvest']['file']);

  // Output file options

  // Use a specific filetype?
   if ($configuration['sox_acodec']) {
     $options[] =  '-t '. $configuration['sox_acodec'];
   }
   else {
     $options[] =  '-t mp3'; // @@@ Is this a sane default? Sox may be lacking mp3 support...
   }

  // Other output options
  if ($configuration['sox_audio_advanced']) {

    // use a specific sample rate?
    if ($configuration['sox_samplerate'] ) {
      $options[] = '-r '. $configuration['sox_samplerate'];
    }
  }

  // @ TODO make sure that the output file has the appropriate extension.
  $output_file  = file_create_filename(
    str_replace(' ', '_', basename($item['harvest']['file'])) .'.'. $configuration['sox_acodec'],
    media_mover_api_dir_path('sox/converted/'. $configuration['cid'])
  );

  // Output file
  $options[] = escapeshellarg($output_file);

  $command = implode(" ", $options);

  // run sox
  $output = _mm_sox_run_command($command);

// @@@
  // check and see if any errors were reported
//  if (!_mm_sox_error_check($output, $item, $configuration, $command)) {
//    return;
//  }

  $message = t('mm_sox converted this file: @file', array('@file' => $output_file));
  $message .= '<br />'. t('sox ran this command: ') .'<br />'. implode(" ", $options);
  $link = l('node '. $item['nid'],  'node/'. $item['nid'] .'/edit');
  watchdog('media_mover', $message, array(), WATCHDOG_NOTICE, $link);

  // run media mover's file perms
  media_mover_api_set_file_perm($output_file);

  // add info to $file
  $item['process']['file'] = $output_file;
  $item['data']['file']['mime'] = 'image/'. $configuration['sox_acodec'];
  $item['data']['file']['drupal_path'] = $output_file;
  $item['status'] = 1;
}

/**
 * Run a SoX command and return the output.
 */
function _mm_sox_run_command($options) {
 $command = variable_get('mm_sox_path', '/usr/bin/sox') .' '. $options;

 ob_start();
   passthru($command ." 2>&1", $command_return );
   $command_output = ob_get_contents();
 ob_end_clean();

 return $command_output;
}

/**
 * Gets the capabilities of the installed SoX.
 */
function _mm_sox_get_caps($ret = null) {
  static $caps;

  if (!is_array($caps)) {
    $output = _mm_sox_run_command('-h');

    $match = array();
    // Search effects
    preg_match('/effect: (.*)$/m', $output, $match);
    $caps['effects'] = explode(' ', trim($match[1]));

    // Search formats
    preg_match('/Supported file formats: (.*)$/m', $output, $match);
    $t = explode(' ', trim($match[1]));
    $f = _mm_sox_formats();
    $caps['formats'] = array();
    // @@@ This is slow.
    foreach ($t as $format) {
      foreach ($f as $d) {
        if ($d['format'] == $format) {
          $caps['formats'][$format] = $d;
          break;
        }
      }
    }
  }
  if ($ret) {
    return $caps[$ret];
  }
  return $caps;
}


/**
 * checks an incoming file path extension to
 * see if it can be decoded
 *
 * @param $file is a full system filepath
 */
function _mm_sox_can_decode($path) {
  $file_types = _mm_sox_get_caps('formats');
  $path_parts = pathinfo($path);

  if ($file_types) {
    foreach ($file_types as $file_type) {
      if ($path_parts['extension']) {
        if (stristr($file_type['extension'], $path_parts['extension'])) {
          return true;
        }
      }
    }
  }
  return false;
}

/**
 * checks to see if a file exists
 * @param $file is a mm file array
 */
function mm_sox_file_exists(&$item) {
  // make sure file exists
  if (!file_exists($item['harvest']['file']) ) {
    $message = t('File did not exist for conversion: %file', array('%file' => $item['harvest']['file']));
    $link = l("node ". $item['nid'],  "node/". $item['nid'] ."/edit");
    watchdog('media_mover', $message, 'WATCHDOG_NOTICE', $link);
    $item['status'] = 0;
  }
}

/**
 * checks sox's output for errors and tries to handle them some way
 * @param $output is the output from a shell command
 * @param $file is a harvested file array
 * @param $configuration is the configuration being run
 * @param $watchdog is boolean, log errors to drupal's watchdog
 * @return true if no errors, false if errors
 *
 **/
function _mm_sox_error_check($output, &$item, $configuration, $command, $watchdog = true) {

  // @@@ THESE ARE FF_MPEG ERRORS!
  // build the error conditions
  // these are all pulled by hand at this point
  $errors = array(
    '/Segmentation fault/i',
    '/Unsupported/i',
   //'/Error while/i', // this is not necessarily fatal
    '/Unable for find a suitable output format for/i',
    '/Incorrect frame size/i',
    '/Unsupported codec/i',
    '/Could not write header/i',
  );

  // check for error conditions
  foreach ($errors as $error) {
    if ($match = preg_match($error, $output)) {
      _mm_sox_error_log($output, $item, $configuration, $command);
      return false;
    }
  }
  return true;
}


/**
 * takes error conditions from the conversion process and deals
 * with them according to the admin configuration
 *
 * @param $output is the command line output
 * @param $file is the file that failed
 * @param $configuration is the configuration that was running
 */
function _mm_sox_error_log($output, &$item, $configuration, $command) {
  watchdog(
    'media_mover',
    "Media Mover SoX had an error converting this file: @file. \nThe command was: @command",
    array(
      '@file' => $item['harvest']['file'],
      '@command' => $command,
    ),
    WATCHDOG_NOTICE, // @@@ 6.x state it maps to better?
    url("node/$item[nid]/edit") // @@@ nid no longer the right thing due to file table in 6.x?
  );

  // notify admin
  if ($emails = variable_get('sox_error_email', null)) {
    $emails = explode(',', $emails);
    foreach ($emails as $email) {
      $email = trim($email);
      if (valid_email_address($email)) {
        drupal_mail('mm_sox', 'admin_notice', $email, language_default(), array('file' => $item));
      }
    }
  }

  // send uploader a message
  if (variable_get('sox_error_user', null)) {
    if ($item['uid']) { // @@@ Test whether this works.
      $account = user_load($item['uid']);
      drupal_mail('mm_sox', 'user_notice', $account->mail, user_preferred_language($account), array('account' => $account, 'file' => $item));
    }
  }
  $item['status'] = 0;
}

/**
 * Implementation of hook_mail().
 */
function mm_sox_mail($key, &$message, $params) {
  $language = $message['language'];
  $l = $language->language;
  switch ($key) {
    case 'admin_notice':
      $message['subject'] = t('SoX conversion problem', array(), $l);
      $message['body'][] = t('There was a problem converting this file:', array(), $l);
      $message['body'][] = $file['harvest_file'];
      $message['body'][] = t('SoX said:', array(), $l);
      $message['body'][] = $output;
      $message['body'][] = t('File data:', array(), $l);
      $message['body'][] = print_r($params['file'], true); // @@@ What does this look like in an email, exactly?
      break;

    case 'user_notice':
      $account = $params['account'];
      $variables = user_mail_tokens($account, $language);
      $file_parts = pathinfo($params['file']['harvest_file']);
      $file = $file_parts['basename'] .'.'. $file_parts['extension'];
      $message['subject'] = t('Problem with your uploaded file', $variables, $l);
      $message['body'][] = "$account->name,";
      $message['body'][] = t("We're sorry, but we're having a hard time converting a file you uploaded.", $variables, $l);
      $message['body'][] = t("We'll take a look at the file and see if we can help, but you can always try converting to a standard format and uploading again.", $variables, $l);
      $message['body'][] = t('Sorry, and thanks for using our site.', $variables, $l);
      break;
  }
}

/**
 * checks to make sure that SoX is in the path
 */
function mm_sox_is_path() {
  if (!_mm_sox_run_command('')) {
    return false;
  }
  return true;
}

/**
 * displays a table of the supported SoX file formats
 */
function _mm_sox_formats_display() {
  $header = array(t('Name'), t('Extension'), t('Description'), t('Pseudo'), t('Header'));
  $rows = array();
  $formats = _mm_sox_get_caps('formats');
  foreach($formats as $format) {
    //$f = _mm_sox_format_description($format);
    $rows[] = array($format['format'], $format['extension'], $format['description'], $format['pseudo'], $format['header']);
  }
  $output = theme('table', $header, $rows);
  return $output;
}

/**
 * displays a table of the SoX encoding and decoding options
 */
function _mm_sox_effects_display() {
  $header = array(t('Effect'), t('Description'));
  $rows = array();
  $effects = _mm_sox_get_caps('effects');
  foreach($effects as $effect) {
    $rows[] = array($effect, 'fixme');
  }
  $output = theme('table', $header, $rows);
  return $output;
}


/* ************************************ */
/* configuration */
/* ************************************ */


/**
 * builds the admin form
 */
function mm_sox_admin() {

  $form['mm_sox'] = array(
    '#type' => 'fieldset',
    '#title' => t('SoX'),
    '#collapsed' => true,
    '#collapsible' => true,
  );

  $form['mm_sox']['mm_sox_about'] = array(
    '#type' => 'fieldset',
    '#title' => t('About SoX installation'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $version = array();
  $output = _mm_sox_run_command('-h');
  preg_match('/: Version (.*)$/m', $output, $version);
  if (!isset($version[1])) {
    $version[1] = t('Unknown');
  }
  $form['mm_sox']['mm_sox_about']['mm_sox_version'] = array(
    '#type' => 'item',
    '#title' => t('SoX version'),
    '#value' =>  '<blockquote>'. $version[1] .'</blockquote>',
    '#description' => t('Version of SoX running on your system'),
  );

  $form['mm_sox']['mm_sox_about']['mm_sox_effects'] = array(
    '#type' => 'item',
    '#title' => t('Supported effects'),
    '#value' =>  _mm_sox_effects_display(),
    '#description' => t('Effects routines that the installed version of SoX supports.'),
  );

  $form['mm_sox']['mm_sox_about']['mm_sox_formats'] = array(
    '#type' => 'item',
    '#title' => t('Supported formats'),
    '#value' => _mm_sox_formats_display(),
    '#description' => t('File formats that the installed version of SoX supports.'),
  );

  $form['mm_sox']['mm_sox_path'] = array(
    '#type' => 'textfield',
    '#title' => t('SoX path'),
    '#default_value' => variable_get('mm_sox_path', '/usr/bin/sox'),
    '#description' => t("Absolute path to the SoX exeutable."),
  );

  $form['mm_sox']['errors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Error handling'),
    '#collapsible' => true,
    '#collapsed' => true,
  );

  $form['mm_sox']['errors']['sox_error_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email transcoding errors'),
    '#default_value' => variable_get('sox_error_email', ''),
    '#description' => t('Comma seperated list of email addresses to notify when an transcoding error happens.'),
  );

  // @ TODO this hasn't been supported yet I think
  /*$form['mm_sox']['errors']['sox_error_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify uploader'),
    '#default_value' => variable_get('sox_error_user', ''),
    '#description' => t('Notify the uploader (if possible) that their upload could not be converted.'),
  );*/
  return $form;
}

/**
 * builds the edit config form
 */
function mm_sox_config($action, $configuration) {
  if (!mm_sox_is_path()) {
    drupal_set_message(t('Sorry, could not find SoX, please go to: !link', array('!link' => l(t('Media Mover Settings'), 'admin/media_mover/settings'))), 'error');
  }
  else {
    $form['mm_sox'] = array(
      '#type' => 'fieldset',
      '#title' => t('SoX audio transcoding settings'),
      '#collapsed' => false,
    );

    // get the output formats
    $outputs = _mm_sox_get_caps('formats');
    $formats = array();
    foreach ($outputs as $k => $format) {
      if ($format['pseudo'] == 'Yes') {
        continue;
      }
      $formats[$k] = t('@extension: @description', array('@extension' => $format['extension'], '@description' => $format['description']));
    }

    $form['mm_sox']['audio'] = array(
      '#type' => 'fieldset',
      '#title' => t('Audio conversion settings'),
      '#collapsed' => $configuration['sox_audio_advanced'] ? false : true,
      '#collapsible' => true,
    );
    $form['mm_sox']['audio']["sox_audio_advanced"] = array(
      '#type' => 'checkbox',
      '#title' => t('Use advanced settings'),
      '#description' => t('Use the advanced audio encoding options. If this is off, SoX will encode mp3 at 64bit, 44.1khz.'),
      '#default_value' => $configuration['sox_audio_advanced'],
    );

    $sample_rates = array('11025' => '11khz', '22050' => '22khz', '32000' => '34khz', '44100' => '44.1khz (default)' );
    $form['mm_sox']['audio']['sox_samplerate'] = array(
      '#type' => 'select',
      '#title' => t('Audio sample rate'),
      '#options' => $sample_rates,
      '#default_value' => $configuration['sox_samplerate'] ? $configuration['sox_samplerate'] : 44100,
      '#description' => t('Sample rate for conversion.'),
    );

    $form['mm_sox']['audio']["sox_acodec"] = array(
      '#type' => 'select',
      '#title' => t('Audio codec'),
      '#options' => $formats,
      '#default_value' => $configuration['sox_acodec'] ? $configuration['sox_acodec'] : 'mp3' ,
      '#description' => t('Select the codec for the output format. Please note, you may need to pick an appropriate video codec for the transcoding. WARNING the codec support right now is experimental. Things may not work as expected.'),
     );

    $form['mm_sox']['file'] = array(
      '#type' => 'fieldset',
      '#title' => t('File settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $form['mm_sox']['file']['sox_output_perms'] = array(
      '#type' => 'textfield',
      '#title' => t('Output file permissions'),
      '#description' => t('Set the permissions on the output file. Default is 0644.'),
      '#default_value' => $configuration['sox_output_perms'] ? $configuration['sox_output_perms'] : '0644',
      '#size' => 4,
    );
  }
  return $form;
}
