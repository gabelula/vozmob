<?php
// $Id: mm_content.module,v 1.4 2008/01/18 00:35:57 bdragon Exp $

/**
 * This file contains all the media mover functions for the media_mover hook
 * which are seperate from the internal workings of the media mover module
 *
 * @TODO: This is still a work-in-progress.  Please finish mm_content_node_save
 */

define(MM_CONTENT_HARVEST, 1);
define(MM_CONTENT_STORE, 2);

/**
 * Implementation of media_mover hook
 * @param $op is the operator to return
 * @param $action is which action is being called
 * @param $configuration is the specific configuration saved for the action for this configuration
 * @param $file is the file in use
 * @param $running_config is the full configuration data currently running
 */
function mm_content_media_mover($op, $action = null, $configuration = null, &$item = array(), $running_config = null ) {
  if (module_exists('content')) {
    switch ($op) {
      case 'name':
        return t('Media Mover content module');

      case 'actions':
        return array(
          'harvest' => array(MM_CONTENT_HARVEST => t('Harvest from a CCK field')),
          'storage' => array(MM_CONTENT_STORE => t('Save data in a CCK field')),
        );

      case 'config':
        switch ($action) {
          case MM_CONTENT_HARVEST:
            return mm_content_config_harvest($action, $configuration);

          case MM_CONTENT_STORE:
            return mm_content_config_save_node($action, $configuration);
        }
        break;


      case 'harvest':
        if ($action == MM_CONTENT_HARVEST) {
          return mm_content_harvest($action, $configuration, $running_config);
        }
        break;

      case 'storage':
        if ($action == MM_CONTENT_STORE) {
          return mm_content_node_save($item, $configuration);
        }
        break;

      case 'delete':
        if ($action == MM_CONTENT_STORE) {
          // @TODO: check action that is being deleted and remove single files based on config

        }
        break;
    }
  }
}

/**
 * Media Mover: Media Mover hook functions
 */

/**
 * return the configuration form for harvesting from CCK fields
 */
function mm_content_config_harvest($action, $configuration) {
  $form = array();
  $form['mm_harvest_conf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Harvest Configuration'),
    '#description' => t('This module harvests files attached to a CCK field'),
  );
  $form['mm_harvest_conf']["mm_config_harvest_field"] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Select files from these CCK fields'),
    '#description' => t('Select the CCK fields to harvest files from.'),
    '#options' => _mm_content_fields(),
    '#default_value' => $configuration['mm_config_harvest_field'],
  );
  return $form;
}

/**
 * return the configuration form for saving to CCK fields
 *
 * NOTE: name form files like: ["db_options"]
 * so that they are processed correctly on the add configuration
 * screen
 */
function mm_content_config_save_node($action, $configuration) {
  $form = array();
  $form['mm_harvest_conf'] = array(
    '#type' => 'fieldset',
    '#title' => t('Harvest Configuration'),
    '#description' => t('This module saves data to a CCK field'),
    '#collapsed' => false,
    '#attributes' => array('id' => 'mm_content--'. MM_CONTENT_STORE, 'class' => 'mm_config_option'),
  );
  $form['mm_harvest_conf']["mm_config_save_field"] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => t('Save the file to this CCK field'),
    '#description' => t('Select the CCK field to save files to.'),
    '#options' => _mm_content_fields(),
    '#default_value' => $configuration['mm_config_save_field'],
  );
  return $form;
}

/**
 * Harvest from the CCK field
 * @param $action is the action id being called
 * @param $config is the configuration array
 * @param $running_config is the full configuration object that is running
 */
function mm_content_harvest($action, $configuration, $running_config) {
  $files = array();
  $fields = content_fields();
  foreach ($configuration['mm_config_harvest_field'] as $field_name => $enabled) {
    if ($enabled) {
      $db_info = content_database_info($fields[$field_name]);
      $results = db_query('SELECT f.filepath, n.nid FROM {files} f LEFT JOIN {node} n ON f.nid = n.nid LEFT JOIN '. $db_info['table'] .' c ON c.nid = n.nid LEFT JOIN {media_mover_files} m ON m.fid = f.fid AND m.cid = %d WHERE c.'. $db_info['columns']['fid']['column'] .' = f.fid AND m.mmfid IS NULL AND n.changed > %d ORDER BY n.nid DESC', $configuration['cid'], $running_config->last_start_time);
      while ($result = db_fetch_array($results)) {
        $files[] = array(
          'harvest_file' => $result['filepath'],
          'harvest_module' => 'mm_content',
          'harvest_action' => 1,
          'nid' => $result['nid'],
        );
      }
    }
  }

  return $files;
}

/**
 * Save to the CCK field
 */
function mm_content_node_save(&$item, $configuration) {
  // @TODO:
  $fields = content_fields();
  $field_name = $configuration['mm_config_save_field'];
  $db_info = content_database_info($fields[$field_name]);
}

/**
 * Return array of content fields for display in configuration forms.
 */
function _mm_content_fields() {
  $fields = array();
  foreach (content_fields() as $field) {
    $fields[$field['field_name']] = $field['widget']['label'];
  }
  return $fields;
}
