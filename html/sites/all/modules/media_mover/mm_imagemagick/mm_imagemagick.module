<?php
// $Id $

/**
 * Implementation of hook_media_mover().
 */
function mm_imagemagick_media_mover($op, $action_id = null, $configuration = array(), &$item = array()) {
  switch ($op) {
    case 'name':
      return "ImageMagick module";

    // edit a configuration option set
    // $type is needed to build out options, is "type:action"
    // $configuration is passed in from db
    case 'config':
      switch ($action_id) {
        case '1': //Simple conversion
          return mm_imagemagick_config($action_id, $configuration);
      }
      break;

    case 'admin':
      return mm_imagemagick_admin();

    // defines what type of driver this module is
    // harvest, process, storage
    case 'verbs':
      return array('process');

    case 'actions':
      return array(
        'process' => array(
          1 => 'Simple conversion',
        ),
      );
      break;

    case 'directories':
      return array('ImageMagick/converted');
      break;

    case 'process':
      switch ($action_id) {
        case '1': //Simple conversion
          return _mm_imagemagick_simple($item, $configuration);
      }
      break;
  }
}

/* ************************************ */
/* conversion functions */
/* ************************************ */

/**
 * processes the incoming file
 * @param $file is a file array
 * @param $configuration is the configuration that governs this process
 * returns the file array
 */
function _mm_imagemagick_simple(&$item, $configuration) {
  // check if the incoming file exists
  mm_imagemagick_file_exists($item);
  if ($item['status'] === 0 ) {
    return;
  }

  // check to see if this file can be decoded
  if (!_mm_imagemagick_can_decode($item['harvest']['file'])) {
    $link = l("node ". $item['nid'],  "node/". $item['nid'] ."/edit");
    watchdog('media_mover','ImageMagick can not decode this file: %file !link', array(
      '%file' => $item['harvest']['file'],
      '!link' => l(t('media mover file'), 'admin/media_mover/file/edit/'. $item['mmfid'])
      ), WATCHDOG_NOTICE, $link);
    $item['status'] = 0;
    return;
  }

  // build the ImageMagick command structure out
  $options = array();

  // Input file
  $options[] = escapeshellarg($item['harvest']['file']);

  // Figure out output file.
  $output_file  = file_create_filename(
    str_replace(' ', '_', basename($item['harvest']['file'])) .'.'. $configuration['mm_imagemagick_outextension'],
    media_mover_api_dir_path('ImageMagick/converted/'. $configuration['cid'])
  );

  // Output format, file
  $options[] = $configuration['mm_imagemagick_outformat'] .':'. escapeshellarg($output_file);

  // run ImageMagick
  $output = _mm_imagemagick_run_command($options);

  // check and see if any errors were reported
  //if (!_mm_imagemagick_error_check($output, $item, $configuration, $command)) {
    //return;
  //}

  $link = l('node '. $item['nid'], 'node/'. $item['nid'] .'/edit');
  watchdog('media_mover', 'mm_imagemagick converted this file: @file<br /> Command run: @command', array('@file' => $output_file, '@command' => implode(" ", $options)), WATCHDOG_NOTICE, $link);

  // run media mover's file perms
  media_mover_api_set_file_perm($output_file);

  // add info to $file
  $item['process']['file'] = $output_file;
  $item['data']['file']['mime'] = 'image/'. $configuration['mm_imagemagick_outformat']; // @@@ This is just plain wrong.
  $item['data']['file']['drupal_path'] = $output_file;
  $item['status'] = 1;
}

/**
 * Run an ImageMagick command and return the output.
 */
function _mm_imagemagick_run_command($options, $command = 'convert') {
  if (is_array($options)) {
    $options = implode(' ', $options);
  }
  $command = variable_get('mm_imagemagick_path', '/usr/bin/') . $command .' '. $options;
  ob_start();
  passthru($command ." 2>&1", $command_return );
  $command_output = ob_get_contents();
  ob_end_clean();
  return $command_output;
}

/**
 * Gets the capabilities of the installed ImageMagick
 */
function _mm_imagemagick_get_caps($ret = null) {
  static $caps;

  if (!is_array($caps)) {

    // Set up input / output format list
    $output = _mm_imagemagick_run_command('-list format');
    $output = preg_split('/[\n\r]+/', $output);

    // Fetch header.
    $header = array_shift($output);

    // Figure out how many spaces means something's a description continuation.
    $temp = array();
    preg_match('/^\s*\w+\s+/', $header, $temp);
    $continuation = strlen($temp[0]);

    // Split header
    $header = preg_split('/\s+/', trim($header));

    // Hunt for the normal fields.
    $mode = -1;
    $format = -1;
    $description = -1;
    foreach($header as $k => $v) {
      if ($v == 'Mode') {
        $mode = $k;
      }
      if ($v == 'Format') {
        $format = $k;
      }
      if ($v == 'Description') {
        $description = $k;
      }
    }

    // Throw away the "line of dashes".
    array_shift($output);
    // Throw away * native blob support
    array_pop($output);
    array_pop($output);

    $count = count($header);

    $formats = array();
    while (!empty($output)) {
      $line = array_shift($output);
      // Is this a contination?
      if (trim(substr($line, 0, $continuation)) == '') {
        continue; // We need to skip continuations in this section.
      }

      $row = preg_split('/\s+/', trim($line), $count);

      $newformat = array();

      if (substr($row[$format], -1) == '*') {
        $newformat['nativeblob'] = TRUE;
        $row[$format] = substr($row[$format], 0, -1);
      }
      else {
        $newformat['nativeblob'] = FALSE;
      }

      $newformat['format'] = $row[$format];
      $newformat['description'] = $row[$description];
      $newformat['read'] = ($row[$mode][0] == 'r');
      $newformat['write'] = ($row[$mode][1] == 'w');
      $formats[] = $newformat;
    }

    foreach ($formats as $format) {
      if ($format['read']) {
        $caps['read formats'][] = $format;
      }
      if ($format['write']) {
        $caps['write formats'][] = $format;
      }
    }
  }
  if ($ret) {
    return $caps[$ret];
  }
  return $caps;
}

/**
 * checks an incoming file path extension to
 * see if it can be decoded
 *
 * @param $file is a full system filepath
 */
function _mm_imagemagick_can_decode($path) {
  $output = _mm_imagemagick_run_command(array(
    escapeshellarg($path)
  ), 'identify');

  return (preg_match('/no decode delegate for this image format/', $output) == 0);
}

/**
 * checks to see if a file exists
 * @param $file is a mm file array
 */
function mm_imagemagick_file_exists(&$item) {
  // make sure file exists
  if (!file_exists($item['harvest']['file']) ) {
    $link = l("node ". $item['nid'],  "node/". $item['nid'] ."/edit");
    watchdog('media_mover', 'File did not exist for conversion: %file', array('%file' => $item['harvest']['file']), WATCHDOG_NOTICE, $link);
    $item['status'] = 0;
  }
}

/**
 * checks ImageMagick's output for errors and tries to handle them some way
 * @param $output is the output from a shell command
 * @param $file is a harvested file array
 * @param $configuration is the configuration being run
 * @param $watchdog is boolean, log errors to drupal's watchdog
 * @return true if no errors, false if errors
 *
 */
function _mm_imagemagick_error_check($output, &$item, $configuration, $command, $watchdog = true) {

  // @@@ THESE ARE FF_MPEG ERRORS!
  // build the error conditions
  // these are all pulled by hand at this point
  $errors = array(
    '/Segmentation fault/i',
    '/Unsupported/i',
   //'/Error while/i', // this is not necessarily fatal
    '/Unable for find a suitable output format for/i',
    '/Incorrect frame size/i',
    '/Unsupported codec/i',
    '/Could not write header/i',
  );

  // check for error conditions
  foreach ($errors as $error) {
    if ($match = preg_match($error, $output)) {
      _mm_imagemagick_error_log($output, $item, $configuration, $command);
      return false;
    }
  }
  return true;
}

/**
 * takes error conditions from the conversion process and deals
 * with them according to the admin configuration
 *
 * @param $output is the command line output
 * @param $file is the file that failed
 * @param $configuration is the configuration that was running
 */
function _mm_imagemagick_error_log($output, &$item, $configuration, $command) {
  watchdog(
    'media_mover',
    "Media Mover ImageMagick had an error converting this file: @file. \nThe command was: @command",
    array(
      '@file' => $item['harvest']['file'],
      '@command' => $command,
    ),
    WATCHDOG_NOTICE, // @@@ 6.x state it maps to better?
    url("node/$item[nid]/edit") // @@@ nid no longer the right thing due to file table in 6.x?
  );

  // notify admin
  if ($emails = variable_get('ImageMagick_error_email', null)) {
    $emails = explode(',', $emails);
    foreach ($emails as $email) {
      $email = trim($email);
      if (valid_email_address($email)) {
        drupal_mail('mm_imagemagick', 'admin_notice', $email, language_default(), array('file' => $item));
      }
    }
  }

  // send uploader a message
  if (variable_get('ImageMagick_error_user', null)) {
    if ($item['uid']) { // @@@ Test whether this works.
      $account = user_load($item['uid']);
      drupal_mail('mm_imagemagick', 'user_notice', $account->mail, user_preferred_language($account), array('account' => $account, 'file' => $item));
    }
  }
  $item['status'] = 0;
}

/**
 * Implementation of hook_mail().
 */
function mm_imagemagick_mail($key, &$message, $params) {
  $language = $message['language'];
  $l = $language->language;
  switch ($key) {
    case 'admin_notice':
      $message['subject'] = t('ImageMagick conversion problem', array(), $l);
      $message['body'][] = t('There was a problem converting this file:', array(), $l);
      $message['body'][] = $file['harvest_file'];
      $message['body'][] = t('ImageMagick said:', array(), $l);
      $message['body'][] = $output;
      $message['body'][] = t('File data:', array(), $l);
      $message['body'][] = print_r($params['file'], true); // @@@ What does this look like in an email, exactly?
      break;

    case 'user_notice':
      $account = $params['account'];
      $variables = user_mail_tokens($account, $language);
      $file_parts = pathinfo($params['file']['harvest_file']);
      $file = $file_parts['basename'] .'.'. $file_parts['extension'];
      $message['subject'] = t('Problem with your uploaded file', $variables, $l);
      $message['body'][] = "$account->name,";
      $message['body'][] = t("We're sorry, but we're having a hard time converting a file you uploaded.", $variables, $l);
      $message['body'][] = t("We'll take a look at the file and see if we can help, but you can always try converting to a standard format and uploading again.", $variables, $l);
      $message['body'][] = t('Sorry, and thanks for using our site.', $variables, $l);
      break;
  }
}

/**
 * checks to make sure that ImageMagick is in the path
 */
function mm_imagemagick_is_path() {
  if (!_mm_imagemagick_run_command('-version')) {
    return false;
  }
  return true;
}

/**
 * displays a table of the supported ImageMagick file formats
 */
function _mm_imagemagick_formats_display() {
  $output = _mm_imagemagick_run_command('-list format');
  $output = preg_split('/[\n\r]+/', $output);

  $header = array_shift($output);

  // Figure out how many spaces means something's a description continuation.
  $temp = array();
  preg_match('/^\s*\w+\s+/', $header, $temp);
  $continuation = strlen($temp[0]);

  // Throw away the "line of dashes".
  array_shift($output);
  // Throw away * native blob support
  array_pop($output);
  array_pop($output);

  $header = preg_split('/\s+/', trim($header));

  $count = count($header);

  $rows = array();
  while (!empty($output)) {
    $line = array_shift($output);
    // Is this a contination?
    if (trim(substr($line, 0, $continuation)) == '') {
      continue; // @@@
    }
    $rows[] = preg_split('/\s+/', trim($line), $count);
  }

  $output = theme('table', $header, $rows);
  return $output;
}

/**
 * displays a table of the ImageMagick encoding and decoding options
 */
function _mm_imagemagick_effects_display() {
  return ''; // @@@
}

/* ************************************ */
/* configuration */
/* ************************************ */

/**
 * builds the admin form
 */
function mm_imagemagick_admin() {

  $form['mm_imagemagick'] = array(
    '#type' => 'fieldset',
    '#title' => t('ImageMagick'),
    '#collapsed' => true,
    '#collapsible' => true,
  );

  $form['mm_imagemagick']['mm_imagemagick_about'] = array(
    '#type' => 'fieldset',
    '#title' => t('About ImageMagick installation'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $version = nl2br(_mm_imagemagick_run_command('-version'));
  $form['mm_imagemagick']['mm_imagemagick_about']['mm_imagemagick_version'] = array(
    '#type' => 'item',
    '#title' => t('ImageMagick version'),
    '#value' =>  '<blockquote>'. $version .'</blockquote>',
    '#description' => t('Version of ImageMagick running on your system'),
  );

  $form['mm_imagemagick']['mm_imagemagick_about']['mm_imagemagick_effects'] = array(
    '#type' => 'item',
    '#title' => t('Supported effects'),
    '#value' =>  _mm_imagemagick_effects_display(),
    '#description' => t('Effects routines that the installed version of ImageMagick supports.'),
  );

  $form['mm_imagemagick']['mm_imagemagick_about']['mm_imagemagick_formats'] = array(
    '#type' => 'item',
    '#title' => t('Supported formats'),
    '#value' => _mm_imagemagick_formats_display(),
    '#description' => t('File formats that the installed version of ImageMagick supports.'),
  );

  $form['mm_imagemagick']['mm_imagemagick_path'] = array(
    '#type' => 'textfield',
    '#title' => t('ImageMagick path'),
    '#default_value' => variable_get('mm_imagemagick_path', '/usr/bin/'),
    '#description' => t("Absolute path to the directory the ImageMagick programs are installed to."),
  );

  $form['mm_imagemagick']['errors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Error handling'),
    '#collapsible' => true,
    '#collapsed' => true,
  );

  $form['mm_imagemagick']['errors']['ImageMagick_error_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email transcoding errors'),
    '#default_value' => variable_get('ImageMagick_error_email', ''),
    '#description' => t('Comma seperated list of email addresses to notify when an transcoding error happens.'),
  );

  // @ TODO this hasn't been supported yet I think
  /*$form['mm_imagemagick']['errors']['ImageMagick_error_user'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify uploader'),
    '#default_value' => variable_get('ImageMagick_error_user', ''),
    '#description' => t('Notify the uploader (if possible) that their upload could not be converted.'),
  );*/
  return $form;
}

/**
 * builds the edit config form
 */
function mm_imagemagick_config($action, $configuration) {
  if (!mm_imagemagick_is_path()) {
    drupal_set_message(t('Sorry, could not find ImageMagick, please go to: !link', array('!link' => l(t('Media Mover Settings'), 'admin/media_mover/settings'))), 'error');
  }
  else {
    $form['mm_imagemagick'] = array(
      '#type' => 'fieldset',
      '#title' => t('ImageMagick audio transcoding settings'),
      '#collapsed' => false,
    );

    // get the output formats
    $outputs = _mm_imagemagick_get_caps('write formats');
    $formats = array();
    foreach ($outputs as $format) {
      $formats[$format['format']] = t('@extension: @description', array('@extension' => $format['format'], '@description' => $format['description']));
    }

    $form['mm_imagemagick']['output'] = array(
      '#type' => 'fieldset',
      '#title' => t('Image conversion settings'),
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
    );
    $form['mm_imagemagick']['output']['mm_imagemagick_outformat'] = array(
      '#type' => 'select',
      '#title' => t('Output format'),
      '#options' => $formats,
      '#default_value' => $configuration['mm_imagemagick_outformat'] ? $configuration['mm_imagemagick_outformat'] : 'PNG',
      '#description' => t('Select the output format.'),
     );
    $form['mm_imagemagick']['output']['mm_imagemagick_outextension'] = array(
      '#type' => 'textfield',
      '#title' => t('Output extension'),
      '#default_value' => $configuration['mm_imagemagick_outextension'] ? $configuration['mm_imagemagick_outextension'] : 'png',
      '#description' => t('Enter the file extension to use for the converted file.'),
    );

    $form['mm_imagemagick']['file'] = array(
      '#type' => 'fieldset',
      '#title' => t('File settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $form['mm_imagemagick']['file']['ImageMagick_output_perms'] = array(
      '#type' => 'textfield',
      '#title' => t('Output file permissions'),
      '#description' => t('Set the permissions on the output file. Default is 0644.'),
      '#default_value' => $configuration['ImageMagick_output_perms'] ? $configuration['ImageMagick_output_perms'] : '0644',
      '#size' => 4,
    );
  }
  return $form;
}
