<?php
// $Id: sms_registration.module

/**
 * Implementation of hook_menu().
 */
function sms_registration_menu() {
  $items['admin/settings/sms_registration'] = array(
    'title' => 'SMS Registration',
    'description' => 'Configure SMS registration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_registration_settings'),
    'access arguments' => array('administer smsframework'),
    'file' => 'sms_registration.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_mail_alter().
 */
function sms_registration_mail_alter(&$message) {
  $options = $message['params']['options'];
  if ($options['action'] == 'registration') {
    $message['headers']['Return-Path'] = variable_get('sms_registration_address', '');
  }
}

/**
 * Implementation of hook_mailsave_clean().
 * 
 * Attempt to match sender to a phone number stored by sms_user module.
 * If no match found and sender is a recognized SMS email gateway, 
 * create a user account.
 */
function sms_registration_mailsave_clean(&$node, $result, $i, $header, $mailbox) {
  // Ignore empty messages.
  if (empty($node)) {
    return; 
  }

  if (empty($node->title)) {
    $node->title = 'Nueva Historia / New Story';
  }

  // If the user was not authenticated via user account email address.
  if (!$node->uid) {
    list($from_address, $from_name) = mailhandler_get_fromaddress($header, $mailbox);
    $from = explode('@', $from_address);

    // Recognize MMS e-mail gateways as valid SMS e-mail gateways.
    $from[1] = mms_email_gateway_rewrite_to_sms($from[1]);
    $providers = module_invoke_all('sms_email_gateway_providers');
    asort($providers);

    // If message is from SMS gateway.
    if (isset($providers[$from[1]])) {
      $number = $from[0];

      // Look up the user by phone number.
      if (($uid = sms_user_get_uid($number)) && ($account = user_load(array('uid' => $uid, 'status' => 1)))) {
        $node->uid = $account->uid;
        $node->name = $account->name;
        mailhandler_switch_user($node->uid);
      }

      list($to_address, $to_name) = sms_registration_get_toaddress($header, $mailbox);
      $to  = explode('@', $to_address);
      $email_registration_accounts = variable_get('sms_registration_address', '');

      // If message is from an SMS/MMS gateway, create a user account.
      if (!$node->uid) {
        $user = FALSE;
        while (!$user) { 
          $user = user_save(NULL, array(
            'name' => variable_get('sms_registration_username', 'Drupal-') . mt_rand(1, db_result(db_query('SELECT MAX(uid) FROM {users}')) * 10),
            'pass' => user_password(8),
            'mail' => $from_address,
            'roles' => ($role = variable_get('sms_registration_role', NULL)) ? array($role => 1) : NULL,
            'status' => 1,
	    'language' => $node->language,
            'sms_user' => array('number' => sms_formatter($from[0]), 'status' => 1, 'gateway' => array('carrier' => $from[1])),
          ));
        }
        $node->uid = $user->uid;
        $node->name = $user->name;
        mailhandler_switch_user($node->uid);
        if (!isset($email_registration_accounts[$to[0]])) {
          $message = variable_get('sms_registration_question_name_blog', t('Thanks! Do you want to have a blog in vozmob? If yes please send one word identifying the blog.'));
          $options = array('carrier' => $from[1], 'from' => variable_get('sms_registration_address', ''), 'subject' => t('Media posted'), 'action' => 'registration');
          sms_send($number, $message, $options);
        }
      }

      // If user has authenticated via mobile number and message was sent to a registration address.
      if (!empty($account->uid) && isset($email_registration_accounts[$to[0]])) {
        $username =  $node->body;
        //if it comes from a valid sms email gateway and it was sent to one of the email registration accounts
        $password = user_password(8);
        $user = user_save($account, array('name' => $username, 'pass' => $password));
        if ($user) {
          $message = variable_get('sms_registration_message_welcome_blog',t('Welcome, !name. Your blog was created. Your password is !pass', array('!name' => $username, '!pass' => $password)));
        }
        else {
          $message = variable_get('sms_registration_message_blog_not_created',t('The blog was not created. Please choose another name.'));
        }
        $options = array('carrier'=> $from[1], 'from' => variable_get('sms_registration_address', ''));
        sms_send($number, $message, $options);
        // Do not post content from the registration address.
        $node = FALSE;
      }
    }
  }
}

/**
 * Return the "To: " address from the received email message.
 */
function sms_registration_get_toaddress($header, $mailbox) {
  if (($toheader = strtolower($mailbox['mailto'])) && isset($header->$toheader)) {
    $to = $header->$toheader;
  }
  else {
    $from = $header->to;
  }
  return array($to[0]->mailbox .'@'. $to[0]->host, $to[0]->personal);
}
