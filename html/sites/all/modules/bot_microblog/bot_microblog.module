<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function bot_microblog_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Twitter'));
    case 'irc:features#twitter':
      return t('Post a Twitter message with ".twitter Just landed in Detroit #amc09"');
  }
}


/**
 * Implementation of hook_irc_msg_channel().
 */
function bot_microblog_irc_msg_channel($data, $from_query = FALSE) {
  if (preg_match('/^\.twitter (.+)/s', $data->message, $matches)) {
    $to = $from_query ? $data->nick : $data->channel;
    $status = '<' . $data->nick . '> ' . $matches[1];
    $length = drupal_strlen($status);
    if ($length > 140) {
      bot_message($to, $data->nick . ': ' . t('Doh! Your status update would be !length characters, max is 140 characters.', array('!length' => $length)));
    }
    elseif ($update = bot_microblog_status($status)) {
      bot_message($to, $data->nick . ': ' . 'http://twitter.com/' . $update->user->screen_name . '/statuses/' . $update->id);
    }
  }
}

/**
 * All responses are available via a query.
 */
function bot_microblog_irc_msg_query($data) {
  bot_microblog_irc_msg_channel($data, TRUE);
}

/**
 * Implementation of hook_menu().
 */
function bot_microblog_menu() {
  $items['admin/settings/bot/microblog'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure Bot Microblog settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_microblog_settings'),
    'title'             => 'Bot Microblog',
  );
  return $items;
}

/**
 * Build the settings form.
 */
function bot_microblog_settings() {
  $form['twitter'] = array(
    '#title'          => t('Twitter'),
    '#type'           => 'fieldset',
  );
  $form['twitter']['bot_microblog_twitter_username'] = array(
    '#title'         => t('Twitter username'),
    '#description'   => t('Enter your Twitter username.'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('bot_microblog_twitter_username', ''),
  );
  $form['twitter']['bot_microblog_twitter_password'] = array(
    '#title'         => t('Twitter password'),
    '#description'   => t('Enter your Twitter password.'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('bot_microblog_twitter_password', ''),
  );
  return system_settings_form($form);
}

/**
 * Follow a Twitter user.
 */
function bot_microblog_follow($username) {
  static $users = array();
  // We only try to follow each user once per bot execution.
  if (!isset($users[$username])) {
    try {
      $twitter = bot_microblog_factory();
      $twitter->friendships->create($username);
    }
    catch (Services_Twitter_Exception $e) {
      bot_microblog_exception($e);
    }
    $users[$username] = TRUE;
  }
}

/**
 * Update Twitter status.
 */
function bot_microblog_status($status) {
  try {
    $twitter = bot_microblog_factory();
    return $twitter->statuses->update($status);
  }
  catch (Services_Twitter_Exception $e) {
    bot_microblog_exception($e);
  }
}

/**
 * Return a Services_Twitter object.
 */
function bot_microblog_factory() {
  static $twitter;
  if (!isset($twitter)) {
    include_once('Services/Twitter.php');
    $twitter = new Services_Twitter(variable_get('bot_microblog_twitter_username', ''), variable_get('bot_microblog_twitter_password', ''));
  }
  return $twitter;
}

/**
 * Log a Services_Twitter_Exception.
 */
function bot_microblog_exception($e) {
  watchdog('bot_microblog', 'Exception: %message', array('%message' => $e->getMessage()), WATCHDOG_WARNING);
}

/**
 * Implementation of hook_bot_aggregator_plus_message_alter().
 */
function bot_microblog_bot_aggregator_plus_message_alter(&$message, $feed, $item) {
  // Custom formatting for Twitter feeds.
  if (strpos($feed->url, 'http://search.twitter.com/search.atom') === 0) {
    $link = explode('/', $item->link);
    $message = '<' . $link[3] . '> ' . $message;
    // Follow the author, so she/he has a better chance of seeing any replies made via IRC.
    bot_microblog_follow($link[3]);
  }
}
