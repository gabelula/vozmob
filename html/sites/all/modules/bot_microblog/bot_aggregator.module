<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function bot_aggregator_help($path, $arg) {
  switch ($path) {
    case 'irc:features':
      return array(t('Follow'), t('Unfollow'));
    case 'irc:features#follow':
      return t('Follow an Atom or RSS feed with ".follow <feed_URL> <channel> <fast|faster|fastest>"');
    case 'irc:features#unfollow':
      return t('Unfollow an Atom or RSS feed with ".unfollow <feed_URL> <channel>"');
  }
}

/**
 * Relay feed items to IRC.
 */
function bot_aggregator_irc_bot_cron($cron = 300) {
  global $irc;
  // Increase the receive timeout from 300 to 600 seconds to reduce unnecessary disconnections.
  // @todo move this elsewhere :)
  $irc->setReceiveTimeout(600);
  $feeds = bot_aggregator_get_feeds();
  while ($feed = db_fetch_object($feeds)) {
    if ($cron == variable_get('bot_aggregator_cron_' . $feed->fid, 300) && ($channels = variable_get('bot_aggregator_channel_' . $feed->fid, array()))) {
      $items = db_query('SELECT a.iid, a.fid, a.title, a.link, a.author FROM {aggregator_item} a LEFT JOIN {bot_aggregator} b ON a.iid = b.iid WHERE a.fid = %d AND b.iid IS NULL ORDER BY a.timestamp asc LIMIT %d', $feed->fid, variable_get('bot_aggregator_limit_' . $feed->fid, 1));
      while ($item = db_fetch_object($items)) {
        $message = ($item->author ? '<' . $item->author . '> ' : '') . $item->title . ' ' . $item->link;
        // Replace line breaks with spaces.
        $message = str_replace(array("\n", "\r"), ' ', $message);
        // Allow other modules to alter (and act on) the message.
        drupal_alter('bot_aggregator_message', $message, $feed, $item);
        foreach ($channels as $channel) {
          if ($channel) {
            bot_message($channel, $message);
          }
        }
        drupal_write_record('bot_aggregator', $item);
      }
    }
  }
}

/**
 * Implementation of hook_irc_bot_cron_faster().
 */
function bot_aggregator_irc_bot_cron_faster() {
  bot_aggregator_irc_bot_cron(60);
}

/**
 * Implementation of hook_irc_bot_cron_fastest().
 */
function bot_aggregator_irc_bot_cron_fastest() {
  bot_aggregator_irc_bot_cron(15);
}

/**
 * Implementation of hook_irc_msg_channel().
 */
function bot_aggregator_irc_msg_channel($data, $from_query = FALSE) {
  if (preg_match('/^\.follow (.+) (.+) (.+)/', $data->message, $matches)) {
    $to = $from_query ? $data->nick : $data->channel;
    if (!valid_url($matches[1], TRUE)) {
      bot_message($to, $data->nick . ': ' . t("Hrm that doesn't appear to be a valid feed URL :("));
    }
    else {
      $channels = bot_aggregator_get_channels();
      if (!isset($channels[$matches[2]])) {
        bot_message($to, $data->nick . ': ' . t("Hrm that doesn't appear to be a valid channel :("));
      }
      else {
        $speed = array('fast' => 300, 'faster' => 60, 'fastest' => 15);
        if (!isset($speed[$matches[3]])) {
          bot_message($to, $data->nick . ': ' . t("Hrm that doesn't appear to be a valid update frequency :("));
        }
        else {
          if (!$feed = db_fetch_array(db_query("SELECT * from {aggregator_feed} WHERE url = '%s'", $matches[1]))) {
            $feed['url'] = $matches[1];
            $feed['refresh'] = $speed[$matches[3]];
            drupal_write_record('aggregator_feed', $feed);
          }
          variable_set('bot_aggregator_channel_' . $feed['fid'], $matches[2]);
          variable_set('bot_aggregator_cron_' . $feed['fid'], $speed[$matches[3]]);
          bot_message($to, $data->nick . ': ' . t('Following !url on !channel every !frequency seconds.', array('!url' => $feed['url'], '!channel' => $matches[2], '!frequency' => $speed[$matches[3]])));
          variable_set('bot_cache_cleared', time());
          $GLOBALS['conf'] = variable_init();
        }
      }
    }
  }
  if (preg_match('/^\.unfollow (.+) (.+)/', $data->message, $matches)) {
    $to = $from_query ? $data->nick : $data->channel;
    if ($feed = db_fetch_array(db_query("SELECT * from {aggregator_feed} WHERE url = '%s'", $matches[1]))) {
      if (variable_get('bot_aggregator_channel_' . $feed['fid'], '') == $matches[2]) {
        variable_set('bot_aggregator_channel_' . $feed['fid'], '');
        bot_message($to, $data->nick . ': ' . t('Unfollowing !url on !channel.', array('!url' => $feed['url'], '!channel' => $matches[2])));
        variable_set('bot_cache_cleared', time());
        $GLOBALS['conf'] = variable_init();
      }
    }
  }
}

/**
 * All responses are available via a query.
 */
function bot_aggregator_irc_msg_query($data) {
  bot_aggregator_irc_msg_channel($data, TRUE);
}

/**
 * Implementation of hook_menu().
 */
function bot_aggregator_menu() {
  $items['admin/settings/bot/aggregator'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure Bot Aggregator settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_aggregator_settings'),
    'title'             => 'Bot Aggregator',
  );
  return $items;
}

/**
 * Build the settings form.
 */
function bot_aggregator_settings() {
  $feeds = bot_aggregator_get_feeds();
  $options = array('' => t('None')) + bot_aggregator_get_channels();
  while ($feed = db_fetch_object($feeds)) {
    $form['feed_' . $feed->fid] = array(
      '#title'         => t('@title settings', array('@title' => $feed->title)),
      '#description'   => t('Settings for feed %url.', array('%url' => $feed->url)),
      '#type'          => 'fieldset',
      '#collapsible'   => TRUE,
      '#collapsed'     => !variable_get('bot_aggregator_channel_' . $feed->fid, ''),
    );
    $form['feed_' . $feed->fid]['bot_aggregator_channel_' . $feed->fid] = array(
      '#title'         => t('IRC channel', array('%title' => $feed->title)),
      '#description'   => t('Select one or more IRC channels to which messages from feed %url will be relayed.', array('%url' => $feed->url)),
      '#type'          => 'select',
      '#options'       => $options,
      '#default_value' => variable_get('bot_aggregator_channel_' . $feed->fid, ''),
      '#multiple'      => TRUE,
    );
    $form['feed_' . $feed->fid]['bot_aggregator_cron_' . $feed->fid] = array(
      '#title'         => t('Update frequency'),
      '#description'   => t('Select the frequency with which new items should be relayed to IRC.'),
      '#type'          => 'select',
      '#options'       => drupal_map_assoc(array(300, 60, 15), 'format_interval'),
      '#default_value' => variable_get('bot_aggregator_cron_' . $feed->fid, 300),
    );
    $form['feed_' . $feed->fid]['bot_aggregator_limit_' . $feed->fid] = array(
      '#title'         => t('Message limit'),
      '#description'   => t('Maximum number of items to relay to IRC on each update. The default <em>1</em> is highly recommended to avoid channel flooding. For very active feeds, a slightly larger limit may be required.'),
      '#type'          => 'textfield',
      '#size'          => 10,
      '#default_value' => variable_get('bot_aggregator_limit_' . $feed->fid, 1),
    );
  }
  return system_settings_form($form);
}

/**
 * Get all Aggregator module feeds.
 */
function bot_aggregator_get_feeds() {
  return db_query('SELECT fid, title, url FROM {aggregator_feed}');
}

/**
 * Get all Bot module channels.
 */
function bot_aggregator_get_channels() {
  $bot_channels = preg_split('/\s*,\s*/', variable_get('bot_channels', '#test'));
  foreach ($bot_channels as $channel) {
    list($channel) = explode(' ', $channel);
    $channels[$channel] = $channel;
  }
  return $channels;
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function bot_aggregator_form_aggregator_form_feed_alter(&$form, &$form_state) {
  $form['refresh']['#options'] = drupal_map_assoc(array(15, 60, 300), 'format_interval') + $form['refresh']['#options'];
}

/**
 * Implementation of hook_cron().
 */
function bot_aggregator_cron() {
  // We need only occasional garbage collection.
  if (!mt_rand(0, 99)) {
    // Delete items that have been purged from the aggregator_item table.
    db_query('DELETE b FROM {bot_aggregator} b LEFT JOIN {aggregator_item} a ON b.iid = a.iid WHERE a.iid IS NULL');
  }
}
