<?php
// $Id$

/**
 * Relay feed items to IRC.
 */
function bot_aggregator_irc_bot_cron($cron = 300) {
  $feeds = bot_aggregator_get_feeds();
  while ($feed = db_fetch_object($feeds)) {
    if ($cron == variable_get('bot_aggregator_cron_' . $feed->fid, 300) && ($channel = variable_get('bot_aggregator_channel_' . $feed->fid, ''))) {
      $items = db_query('SELECT a.iid, a.fid, a.title, a.link, a.author FROM {aggregator_item} a LEFT JOIN {bot_aggregator} b ON a.iid = b.iid WHERE a.fid = %d AND b.iid IS NULL ORDER BY a.timestamp asc LIMIT %d', $feed->fid, variable_get('bot_aggregator_limit', 1));
      while ($item = db_fetch_object($items)) {
        $message = ($item->author ? '<' . $item->author . '> ' : '') . $item->title . ' ' . $item->link;
        // Allow other modules to alter (and act on) the message.
        drupal_alter('bot_aggregator_message', $message, $feed, $item);
        bot_message($channel, $message);
        drupal_write_record('bot_aggregator', $item);
      }
    }
  }
}

/**
 * Implementation of hook_irc_bot_cron_faster().
 */
function bot_aggregator_irc_bot_cron_faster() {
  bot_aggregator_irc_bot_cron(60);
}

/**
 * Implementation of hook_irc_bot_cron_fastest().
 */
function bot_aggregator_irc_bot_cron_fastest() {
  bot_aggregator_irc_bot_cron(15);
}

/**
 * Implementation of hook_menu().
 */
function bot_aggregator_menu() {
  $items['admin/settings/bot/aggregator'] = array(
    'access arguments'  => array('administer bot'),
    'description'       => 'Configure Bot Aggregator settings.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('bot_aggregator_settings'),
    'title'             => 'Bot Aggregator',
  );
  return $items;
}

/**
 * Build the settings form.
 */
function bot_aggregator_settings() {
  $feeds = bot_aggregator_get_feeds();
  $channels = preg_split('/\s*,\s*/', variable_get('bot_channels', '#test'));
  $options = array('' => t('None'));
  foreach ($channels as $channel) {
    list($channel) = explode(' ', $channel);
    $options[$channel] = $channel;
  }
  while ($feed = db_fetch_object($feeds)) {
    $form['feed_' . $feed->fid] = array(
      '#title'       => t('Settings for feed %title', array('%title' => $feed->title)),
      '#type'        => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed'   => TRUE,
    );
    $form['bot_aggregator_channel_' . $feed->fid] = array(
      '#title'         => t('IRC channel', array('%title' => $feed->title)),
      '#description'   => t('Select an IRC channel to which messages from feed %url will be relayed.', array('%url' => $feed->url)),
      '#type'          => 'select',
      '#options'       => $options,
      '#default_value' => variable_get('bot_aggregator_channel_' . $feed->fid, ''),
    );
    $form['bot_aggregator_cron_' . $feed->fid] = array(
      '#title'         => t('Update frequency'),
      '#description'   => t('Select the frequency with which new messages should be relayed to IRC.'),
      '#type'          => 'select',
      '#options'       => drupal_map_array(array(300, 60, 15), 'format_interval'),
      '#default_value' => variable_get('bot_aggregator_cron_' . $feed->fid, 300),
    );
    $form['bot_aggregator_limit_' . $feed->fid] = array(
      '#title'         => t('Message limit'),
      '#description'   => t('Maximum number of tweets to relay to IRC every 15 seconds. The default <em>1</em> is highly recommended to avoid channel flooding. For very active feeds, a slightly larger limit may be required.'),
      '#type'          => 'textfield',
      '#size'          => 10,
      '#default_value' => variable_get('bot_aggregator_limit_' . $feed->fid, 1),
    );
  }
  return system_settings_form($form);
}

/**
 * Get all search.twitter.com feeds from Aggregator module.
 */
function bot_aggregator_get_feeds() {
  return db_query('SELECT fid, title, url FROM {aggregator_feed}');
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function bot_aggregator_form_aggregator_form_feed_alter(&$form, &$form_state) {
  $form['refresh']['#options'][0] = t('0 sec');
}

/**
 * Implementation of hook_cron().
 */
function bot_aggregator_cron() {
  // We only need to run this garbage collection occasionally.
  if (!mt_rand(0, 99)) {
    // Delete items that have been purged from the aggregator_item table.
    db_query('DELETE b FROM {bot_aggregator} b LEFT JOIN {aggregator_item} a ON b.iid = a.iid WHERE a.iid IS NULL');
  }
}
