<?php
// $Id$

/**
 * @file
 * VozMob custom support module.
 */

/**
 * Implementation of hook_menu().
 */
function vozmob_support_menu() {
  $items['admin/messaging/settings/method/mms'] = array(
    'title' => 'MMS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vozmob_support_messaging_mms_settings'),
    'access arguments' => array('administer messaging'),
    'file' => 'vozmob_support.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_views_api().
 */
function vozmob_support_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_form_alter().
 */
function vozmob_support_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'messaging_sendto_form':
      $form['sendto']['#description'] = t("Enter a recipient's mobile phone number, email address or user name.");
      $form['sendto']['#weight'] = -20;
      $gateway = sms_default_gateway();
      if (function_exists($gateway['send form'])) {
        $form['gateway']['#tree'] = TRUE;
        $form['gateway']['#weight'] = -10;
        $form['gateway'] = array_merge($gateway['send form']($required), $form['gateway']);
      }
      if (isset($form['gateway']['carrier']['#description'])) {
        $form['gateway']['carrier']['#description'] = t("Select the recipient's wireless carrier if sending to a phone number.");
      }
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function vozmob_support_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Move the messaging_sendto form down to the bottom of the node.
  if ($op == 'view' && isset($node->content['messaging_sendto']['#weight'])) {
    unset($node->content['messaging_sendto']);
  }
  if(($op == 'presave') && ($node->type == 'blog')) {
    _vozmob_support_media_mover_cleanup($node);
  }
}

/**
 * Implementation of hook_mail_alter().
 */
function vozmob_support_mail_alter(&$message) {
  if (!empty($message['from'])) {
    $message['headers']['Return-Path'] = $message['from'];
  }
  // Change message format sent by user contact form
  if ($message['id'] == 'contact_user_mail') {
    // Get the individual message parts
    $salutation = $message['body'][0];
    $info = $message['body'][1];
    $settings = $message['body'][2];
    $msg = $message['body'][4];
    // Create the body with the new order
    $message['body'] = array($salutation, $msg, $info, $settings);
  }
}

/**
 * Implementation of hook_message_alter().
 */
function vozmob_support_message_alter(&$message, &$info) {
  if (!empty($message->params['node']) && ($from = variable_get('vozmob_support_messaging_mms_from_node', NULL))) {
    $message->params['sms']['from'] = token_replace($from, 'node', $message->params['node']);
  }
}

function vozmob_support_imagecache_default_presets() {
$presets = array();

$presets['feature'] = array (
  'presetname' => 'feature',
  'actions' => 
  array (
    0 => 
    array (
      'weight' => '0',
      'module' => 'imagecache',
      'action' => 'imagecache_scale_and_crop',
      'data' => 
      array (
        'width' => '330',
        'height' => '247',
      ),
    ),
  ),
);

$presets['features'] = array (
  'presetname' => 'features',
  'actions' => 
  array (
    0 => 
    array (
      'weight' => '0',
      'module' => 'imagecache',
      'action' => 'imagecache_scale_and_crop',
      'data' => 
      array (
        'width' => '96',
        'height' => '72',
      ),
    ),
  ),
);

$presets['overlay'] = array (
  'presetname' => 'overlay',
  'actions' => 
  array (
    0 => 
    array (
      'weight' => '0',
      'module' => 'imagecache',
      'action' => 'imagecache_scale',
      'data' => 
      array (
        'width' => '',
        'height' => '384',
        'upscale' => 1,
      ),
    ),
  ),
);
$presets['sidebar'] = array (
  'presetname' => 'sidebar',
  'actions' => 
  array (
    0 => 
    array (
      'weight' => '0',
      'module' => 'imagecache',
      'action' => 'imagecache_scale_and_crop',
      'data' => 
      array (
        'width' => '57',
        'height' => '44',
      ),
    ),
  ),
);

  return $presets;
} 

function vozmob_support_link_alter(&$links, $node) {
  $links = comment_link('node', $node, TRUE) + $links;
  foreach ($links as $key => $link) {
    if (strpos($key, 'service_links_') === 0) {
      unset($links[$key]);
      $links['service-links ' . $key] = $link;
    }
  }
  if (user_access('forward content')) {
    $links['sms_sendtophone'] = array(
      'title' => t('Send to phone'),
      'href' => "node/{$node->nid}/sendto",
      'attributes' => array('class' => 'sms-sendtophone', 'title' => t('Send a story via MMS or e-mail.')),
    );
  }
  if (isset($links['upload_attachments'])) {
    unset($links['upload_attachments']);
  }
}

function _vozmob_support_media_mover_cleanup(&$node) {
  
  // this variable keeps track of whether cleanup occurred - if it did, then we'll
  // also need to clear some cache items.
  $clean_up = FALSE;

  // If the node is being saved to the database for the first time, do nothing and quit
  if ($node->nid == NULL) {
    return;
  }
 
  // get the media_mover array - normally it's in the node object, but if not fetch via API
  $mm_node_data = array();
  if (!empty($node->media_mover)){
    $mm_node_data = $node->media_mover;
  } 
  else {
    $mm_node_data = media_mover_api_node_files_fetch($node->nid);
  }
  
  // process each media mover item
  foreach ($mm_node_data as $cid => $cid_config) {
    foreach ($cid_config as $config) {
      $fid = $config['fid'];
      
      // mm items w/ a CID of 6 are derivitave thumbnails, so we don't want to handle them
      // directly.  we handled them explicitly later on if we find a thumbnail that has been
      // derived from a video.
      if ($cid != 6) {

        // Check to see if a file attached to the node is slated for removal.
        $remove_key_exists = array_key_exists('remove', $node->files[$fid]);
	$remove_file = 0;
	if ($remove_key_exists) {
	  $remove_file = $node->files[$fid]['remove'];
	}

        // if we find a file slated for removal, begin the process of cleaning up
	// the media mover tables.
	if ($remove_file) {
	
	  // there's at least one file to remove, so we'll need to do some cleanup
	  $clean_up = TRUE;

          // Delete the explicit media_movie entry for this derived cid item
	  db_query('DELETE FROM media_mover_files WHERE mmfid = %d AND nid = %d AND fid = %d AND cid = %d', $config['mmfid'], $config['nid'], $config['fid'], $config['cid']);
	  
	  // time to look for a thumbnail, then delete it:
	  //.thumb4_0.jpg
	  
	  // This next section is somewhat arcane.  Basically, there is no direct relationship between
	  // an uploaded video and its derived thumbnails, so we have to do some filename surgery
	  // to check for a match.  If we find a match, we delete the media_mover_files entry for it
	  // and remove it from the field_image cck field if it's been attached.
	  
	  foreach ($node->field_image as $image_index=>$field_image) {
	    
	    // Compare the harvest_file for the video w/ what its systematically created thumnail derivative would be
	    $harvest_file = basename($config['harvest_file']);
	    $possible_thumbnail = $harvest_file . '.thumb4_0.jpg';
	    
	    // If a match is found, proceed with cleanup.
	    if ($field_image['filename'] == $possible_thumbnail) {
	    
	      // process all thumbnail derivatives and act when we find the right one
	      foreach ($mm_node_data[6] as $thumb_config) {
		$check_thumb = basename($thumb_config['complete_file']);
	        if ($check_thumb == $possible_thumbnail) {
		  // delete the media_mover_files entry
                  db_query('DELETE FROM media_mover_files WHERE mmfid = %d AND nid = %d AND fid = %d AND cid = %d', $thumb_config['mmfid'], $thumb_config['nid'], $thumb_config['fid'], $thumb_config['cid']);
		  // delete the cck reference to the thumbnail
		  unset($node->field_image[$image_index]);
		}
	      }
	    }
	  }
        }
      }
    }
  }
  // if files were removed, we need to remove some caching records so that the node
  // will display properly to end users.
  if ($clean_up) {
    $cache_cid = 'content:' . $node->nid;
    cache_clear_all($cache_cid, 'cache_content', TRUE);
    cache_clear_all('media_mover_files_node_'. $node->nid, 'cache_media_mover', TRUE);
    //db_query('DELETE FROM cache_media_mover WHERE cid = %d', 'media_mover_files_node_' . $node->nid . '_8');
    watchdog('vozmob_support', 'Cleaned up media_mover entries for ' . url('node/' . $node->nid, array('absolute' => TRUE)));
  }
}

/**
 * Implementation of hook_mailhandler()
 * Make $node use user's desired language.
 */
function vozmob_support_mailhandler(&$node, $result, $i, $header, $mailbox) {
  $user = user_load($node->uid);
  $node->language = $user->language;
  return $node;
}
