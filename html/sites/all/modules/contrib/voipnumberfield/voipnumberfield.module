<?php

/**
 * Implementation of hook_perm().
 */

//TODO: Revise permissions
function voipnumberfield_perm() {
  return array('use default voip number');
}

/**
 * Implementation of hook_menu().
 */
function voipnumberfield_menu() {
  $items['admin/settings/voipnumberfield'] = array(
    'title' => 'VoIP Number',
    'description' => 'VoIP Number Field settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voipnumberfield_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function voipnumberfield_admin_settings_form(&$form_state) {
  $form = _voipnumberfield_settings_fields($form_state);
  return system_settings_form($form);
}

function _voipnumberfield_settings_fields(&$form_state, $field = FALSE) {
  drupal_add_js(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.js');

  /*Set stored values, they can come from admin form or from field form*/
  if ($field) {
    $voipnumberfield_choice = !empty($field['voipnumberfield_choice']) ? $field['voipnumberfield_choice'] : variable_get('voipnumberfield_choice', 1);
    $voipnumberfield_default = !empty($field['voipnumberfield_default']) ? $field['voipnumberfield_default'] : variable_get('voipnumberfield_default', '');
    $voipnumberfield_max_length = !empty($field['voipnumberfield_max_length']) ? $field['voipnumberfield_max_length'] : variable_get('voipnumberfield_max_length', 15);
    $voipnumberfield_allow_sip = !empty($field['voipnumberfield_allow_sip']) ? $field['voipnumberfield_allow_sip'] : variable_get('voipnumberfield_allow_sip', TRUE);
    $voipnumberfield_allowed_countries = isset($field['voipnumberfield_allowed_countries']) ? $field['voipnumberfield_allowed_countries'] : variable_get('voipnumberfield_allowed_countries', '');
    $prefix = '';
  }
  else {
    $voipnumberfield_choice = variable_get('voipnumberfield_choice', 1);
    $voipnumberfield_default = variable_get('voipnumberfield_default', '');
    $voipnumberfield_max_length = variable_get('voipnumberfield_max_length', 15);
    $voipnumberfield_allowed_countries = variable_get('voipnumberfield_allowed_countries', '');
    $voipnumberfield_allow_sip = variable_get('voipnumberfield_allow_sip', TRUE);
    $prefix = '<div>' . t('This are global settings, each field can be further adjusted with per field settings.') . '</div>';
  }
  /*Max Length*/
  $form['voipnumberfield_max_length'] = array(
    '#prefix' => $prefix,
    '#type' => 'textfield',
    '#title' => t('Number length'),
    '#default_value' => $voipnumberfield_max_length,
    '#description' => t('Maximum length of international numbers, according to the ITU this is 15.'),
  );

  /*Allow SIP numbers*/
  $form['voipnumberfield_allow_sip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow SIP numbers'),
    '#default_value' => $voipnumberfield_allow_sip,
    '#description' => t('Enable if you want to allow for SIP addresses in VoIP Number field.'),
  );

  /*VoIP Allowed Countries*/
  $form['voipnumberfield_choice'] = array(
    '#type' => 'item',
    '#title' => t('Country code settings'),
  );

  /*() Allow all*/
  $form['voipnumberfield_choice']['country_all'] = array(
    '#type' => 'radio',
    '#title' => t('Allow all'),
    '#return_value' => 1,
    '#default_value' => $voipnumberfield_choice,
    '#parents' => array('voipnumberfield_choice')
  );

  /*() Let user select from list*/
  $form['voipnumberfield_choice'] ['country_list'] = array(
    '#prefix' => '<div class="container-inline form-item">',
    '#suffix' => '</div>'
  );

  $form['voipnumberfield_choice']['country_list']['country_list_choice'] = array(
    '#type' => 'radio',
    '#title' => t('Let user select from predefined list') . '<br/>',
    '#return_value' => 2,
    '#default_value' => $voipnumberfield_choice,
    '#parents' => array('voipnumberfield_choice')
  );

  $countries = voipnumberfield_dialing_codes();
  $form['voipnumberfield_choice']['country_list']['voipnumberfield_allowed_countries'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#default_value' => $voipnumberfield_allowed_countries,
    '#options' => $countries,
    '#description' => t('Select which countries will be available. Use CTRL key to select multiple values.'),
    '#suffix' => '</div>',
    '#size' => 10,
  );

  /*() Use default*/
  $form['voipnumberfield_choice']['default_country'] = array(
    '#prefix' => '<div class="container-inline form-item">',
    '#suffix' => '</div>'
  );

  $form['voipnumberfield_choice']['default_country']['default_country_choice'] = array(
    '#type' => 'radio',
    '#title' => t('Use default country code:'),
    '#return_value' => 3,
    '#default_value' => $voipnumberfield_choice,
    '#parents' => array('voipnumberfield_choice')
  );

  $form['voipnumberfield_choice']['default_country']['voipnumberfield_default'] = array(
    '#type' => 'textfield',
    '#default_value' => $voipnumberfield_default,
    '#size' => 20,
    '#attributes' => array('onClick' => '$("input[name=voipnumberfield_choice][value=3]").attr("checked", true);'),
  );

  return $form;
}

/*CCK Functions*/
/**
 * Implementation of hook_field_info().
 */
function voipnumberfield_field_info() {
  return array(
    'voipnumberfield' => array(
      'label' => t('VoIP Number'),
      'description' => t('VoIP Number CCK.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function voipnumberfield_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = _voipnumberfield_settings_fields($form_state, $field);
      return $form;

    case 'save':
      $settings = array(
        'voipnumberfield_choice',
        'voipnumberfield_types',
        'voipnumberfield_allowed_countries',
        'voipnumberfield_default',
        'voipnumberfield_max_length',
        'voipnumberfield_show_code',
        'voipnumberfield_allow_sip'
      );
      return $settings;

    case 'database columns':
      $columns = array(
        'vnid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE
        ),
      );
	  //@todo: $item['phone'] becomes $item['vnid']
      return $columns;
    case 'views data':
      //@todo:
      break;
  }
}

/**
 * Implementation of hook_field().
 */
function voipnumberfield_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
    case 'validate':
      watchdog('voipnumberfield', 'field: '.print_r($field,true));
      watchdog('voipnumberfield', 'node field: '.print_r($node_field,true));
      if(isset($field['default_value_widget'])) {
        //This is validation for field settings, skip it
        return;
      }
      foreach ($node_field as $delta => $item) {
        if ($item['vnid'] != '') {
          switch ($item['type']) {
            case VOIPNUMBER_PSTN:
            case VOIPNUMBER_MOBILE:
            case VOIPNUMBER_SMS:
              $phonenumber = $item['vnid'];
              $phonenumber = VoipCall::NormalizeNumber($phonenumber);
              //Check phone length
              if (!_voipnumberfield_valid_int_phone_number($phonenumber, $error, $field['voipnumberfield_max_length'])) {
                form_set_error($field['field_name'].']['.$delta.'][vnid', t('"%value" is %error', array(
                  '%value' => $item['vnid'],
                  '%error' => $error
                )));
              }

              switch ($field['voipnumberfield_choice']) {
                case 1:
                  //Allow all country codes, don't do anything
                  //@todo: should we check that its valid country code?
                  break;
                case 2:
                  //Allow only selected country codes
                  $number_country_temp = VoipNumber::getCountryFromNumber($phonenumber);
                  $allowed = FALSE;
                  if(!is_array($number_country_temp)) {
                    //VoipNumber::getCountryFromNumber can return array of countries or string
                    $number_countries[] = $number_country_temp;
                  }
                  else {
                    $number_countries = $number_country_temp;
                  }
                  $countries = $field['voipnumberfield_allowed_countries'];
                  //$country_codes = voipnumberfield_dialing_codes(2);
                  //$list_of_countries = array();
                  if (is_array($countries)) {
                    //Since $number_countries can be multiple countries we need to check each one
                    foreach($number_countries as $number_country) {
                      if(in_array($number_country, $countries)) {
                        $allowed = TRUE;
                      }
                    }
                    if(!$allowed) {
                      form_set_error($field['field_name'] .']['.$delta.'][vnid', t('"%value" is not a
                      phone number in allowed countries. Allowed countries
                      are %countries', array(
                        '%value' => $item['vnid'],
                        '%countries' => implode($countries , ', ')
                      )));
                    }
                  }
                  break;
                case 3:
                  //Allow only default country
                  $countries = VoipNumber::getCountryFromCode($field['voipnumberfield_default']);
                  $number_code = VoipNumber::getCodeFromNumber($phonenumber);
                  if($number_code != $field['voipnumberfield_default']) {
                    form_set_error($field['field_name'] .']['.$delta.'][vnid', t('"%value" is not a
                      phone number in allowed country. Allowed countries
                      are %countries', array(
                      '%value' => $item['vnid'],
                      '%countries' => implode($countries , ', ') ,
                    )));
                  }
                  break;
              }
              break;
            case VOIPNUMBER_SIP:
              //Couldn't find regex for SIP validation, therefore using email validation + added ':' as valid character (eg sip:john@test.com)
              $base_sip = str_ireplace('sip://', '', $item['vnid']);
              if (!eregi("^[_a-z0-9:-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", $base_sip)) {
                form_set_error($field['field_name'] .']['.$delta.'][vnid', t('"%value" is invalid SIP number.', array('%value' => $item['vnid'])));
              }
              break;
          }
        }
      }
      break;
    case 'insert':
    case 'update':
      //watchdog('voipnumberfield', 'field: '.print_r($field,true));
      //watchdog('voipnumberfield', 'node field: '.print_r($node_field,true));
      foreach ($node_field as $delta => $item) {
        if (empty($item['vnid']) && empty($item['real_vnid'])) {
          //This is empty field don't do anything
          continue;
        }
        //Save number as VoIPNumber object
          if(!empty($item['real_vnid'])) {
            //Load existing VoipNumber
            $voipnumber = VoipNumber::load($item['real_vnid']);
          }
          else {
            //Create new VoipNumber
            $voipnumber = new VoipNumber();
          }

        //at this point vnid contains user entered number
        $number = !empty($item['vnid']) ? $item['vnid'] : '';

          if($item['type'] == VOIPNUMBER_SIP) {
            //In case of SIP make sure it starts with sip://
            $number = str_ireplace('sip://', '', $number);
            $number = 'sip://' . $number;
          }

        $number = VoipCall::NormalizeNumber($number);

          $voipnumber->setNumber($number);
          //set type based on type field
          $voipnumber->setType($item['type']);

          //@todo: set uid? set nid?
          $voipnumber->setNid($node->nid);

        //Set country name if set
        if($item['country']) {
          $voipnumber->setCountryName($item['country']);
        }

        //Set default number
        if($item['default']) {
          $voipnumber->setDefault(TRUE);
        }

          $voipnumber->setActive(TRUE);
          $voipnumber->save();
          $vnid = $voipnumber->getVnid();
          $node_field[$delta]['vnid'] = $vnid;
     }
      break;
    case 'delete':
      //Delete all VoipNumber data related to this node field
      foreach ($node_field as $delta => $item) {
        if (!empty($item['vnid'])) {
          $voipnumber = VoipNumber::load($item['vnid']);
          if($voipnumber) {
            $voipnumber->delete();
          }
        }
      }
      break;
  }
}


/**
 * Implementation of hook_content_is_empty().
 */
function voipnumberfield_content_is_empty($item, $field) {
  if ($field['voipnumberfield_choice'] == 3) {
    //If default country is set for this field then consider value empty if
    //its equal to country code
    if($item['vnid'] == $field['voipnumberfield_default']) {
      return TRUE;
    }
  }

  if(empty($item['vnid'])) {
    if($item['real_vnid']) {
      $voipnumber = VoipNumber::load($item['real_vnid']);
      $voipnumber->delete();
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function voipnumberfield_theme() {
  return array(
    'voipnumberfield_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'voipphonenumber_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_numbercountry' => array(
      'arguments' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_number_local' => array(
      'arguments' => array('element' => NULL),
    ),
    'voipnumberfield_formatter_number_data' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function voipnumberfield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Full number (E.164 format) (+XXXYYNNNNNNNN)'),
      'field types' => array('voipnumberfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'numbercountry' => array(
      'label' => t('Full number (E.164 format) with country name'),
      'field types' => array('voipnumberfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'number_local' => array(
      'label' => t('Local number (0YYNNNNNN)'),
      'field types' => array('voipnumberfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'number_data' => array(
      'label' => t('Full number (E.164 format) with additional data'),
      'field types' => array('voipnumberfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_field_formatter().
 *
 * Prepare an individual item for viewing in a browser.
 *
 * @param $field
 *   The field the action is being performed on.
 * @param $item
 *   An array, keyed by column, of the data stored for this item in this field.
 * @param $formatter
 *   The name of the formatter being used to display the field.
 * @param $node
 *   The node object, for context. Will be NULL in some cases.
 *   Warning: when displaying field retrieved by Views, $node will not
 *   be a "full-fledged" node object, but an object containg the data returned
 *   by the Views query (at least nid, vid, changed)
 * @return
 *   An HTML string containing the formatted item.
 *
 * In a multiple-value field scenario, this function will be called once per
 * value currently stored in the field. This function is also used as the handler
 * for viewing a field in a views.module tabular listing.
 *
 * It is important that this function at the minimum perform security
 * transformations such as running check_plain() or check_markup().
 */
/*
function voipnumberfield_field_formatter($field, $item, $formatter, $node) {
  watchdog('voipnumberformatter', "$field, $item, $formatter, $node");
  if (!isset($item['vnid'])) {
    return '';
  }
  $voipnumber = VoipNumber::load($item['vnid']);
  if ($field['text_processing']) {
    $text = check_markup($voipnumber->getNumber(), $item['format'], is_null($node) || isset($node->in_preview));
  }
  else {
    $text = check_plain($voipnumber->getNumber());
  }
  // iPhone Support
  if (strpos($_SERVER['HTTP_USER_AGENT'], 'iPhone') !== FALSE) {
    $text = '<a href="tel:' . $text . '">' . $text . '</a>';
  }
  return $text;
}
*/
/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_voipphonenumber_widget($element) {
  return theme('voipnumberfield_widget', $element);
}

function theme_voipnumberfield_widget($element) {
  drupal_add_js(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.js');
  $output = '';
  $output .= theme('textfield', $element['vnid']);
  $output .= theme('checkbox', $element['default']);
  $output .= theme('select', $element['type']);
  $output .= theme('select', $element['country']);
  return $output;
}

/**
 * Theme function for 'default' field formatter.
 * Returns the phone number in E.164 format or sip address
 */
function theme_voipnumberfield_formatter_default($element) {
  $voipnumber = VoipNumber::load($element['#item']['vnid']);
  return isset($voipnumber) ? $voipnumber->getNumber() : '';
}

/**
 * Theme function for 'number with country name' field formatter.
 */
function theme_voipnumberfield_formatter_numbercountry($element) {
  $voipnumber = VoipNumber::load($element['#item']['vnid']);
  if(!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_SIP:
      //In case of SIP return number only
      return $voipnumber->getNumber();
      break;
    default:
      //Otherwise return Country name  Phone number
	    $number = $voipnumber->getNumber();
      //see if this number has stored country
      $voipnumber_country = $voipnumber->getCountryName();
      $country = !empty($voipnumber_country) ? $voipnumber_country : VoipNumber::getCountryFromNumber($number);
      return $country . " " . $number;
      break;
  }
}

/**
 * Theme function for 'number_local' field formatter.
 */
function theme_voipnumberfield_formatter_number_local($element) {
  $voipnumber = VoipNumber::load($element['#item']['vnid']);
  if(!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_SIP:
      //In case of SIP no additonal processing is needed
      return $voipnumber->getNumber();
      break;
    default:
      //Otherwise return local number
      $number = $voipnumber->getNumber();
      $country_code = VoipNumber::getCodeFromNumber($number);
      $local_number = str_replace('+', '', $number);//substract country code and + sign from number to get local number

      //Remove country code from begining of number
      $pattern = "/^$country_code/";
      $local_number = preg_replace($pattern, 0, $local_number);//replace with zero for local number
      return $local_number;
      break;
  }
}

/**
 * Theme function for 'number_data' field formatter.
 */
function theme_voipnumberfield_formatter_number_data($element) {
  $voipnumber = VoipNumber::load($element['#item']['vnid']);
  if(!isset($voipnumber)) {
    return '';
  }
  switch ($voipnumber->getType()) {
    case VOIPNUMBER_PSTN:
      $type = t('PSTN number');
      break;
    case VOIPNUMBER_SIP:
      $type = t('SIP number');
      break;
    case VOIPNUMBER_SMS:
      $type = t('SMS number');
      break;
    case VOIPNUMBER_MOBILE:
      $type = t('Mobile number');
      break;
    case VOIPNUMBER_WORK:
      $type = t('Work number');
      break;
    case VOIPNUMBER_HOME:
      $type = t('Home number');
      break;
    case VOIPNUMBER_FAX:
      $type = t('Fax number');
      break;
  }
  $output = $voipnumber->getNumber() . ' (' .$type. ')';

  return $output;
}

/**
 * Implementation of hook_widget_info().
 * Define Phone number, SIP Number widgets.
 **/
function voipnumberfield_widget_info() {
  return array(
    'voipphonenumber_widget' => array(
      'label' => t('VoIP Number'),
      'field types' => array('voipnumberfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function voipnumberfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $field['widget']['label'],
    '#weight' => $field['widget']['weight'],
    '#description' => $field['widget']['description'],
    '#required' => $field['required'],
    '#field' => $field,
  );
  return $element;
}


/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function voipnumberfield_elements() {
  return array(
    'voipphonenumber_widget' => array(
      '#input' => TRUE,
      '#process' => array('voipphonenumber_widget_process'),
    ),
  );
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function voipphonenumber_widget_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_settings = content_fields($element['#field_name'], $element['#type_name']);

  $voipnumberfield_choice = !empty($field_settings['voipnumberfield_choice'])
    ? $field_settings['voipnumberfield_choice']
    : variable_get('voipnumberfield_choice', 1);

  $phone_field_key = $element['#columns'][0];
  //This returns the number not vnid so user workaround by getting value
  //directly from $form['#node']
  //$vnid = $element['#value'][$phone_field_key];
  $vnid = $form['#node']->{$element['#field_name']}[$element['#delta']]['vnid'];
  $voipnumber = VoipNumber::load($vnid);
  $default_number = isset($voipnumber) ? $voipnumber->getNumber() : NULL;

  if (empty($element['#title'])) {
    $title = t('Phone number');
  }
  else {
    $title = $element['#title'];
  }

  if($voipnumberfield_choice == 3) {
    //Allow only default country
    $default_code = $field_settings['voipnumberfield_default'];
    if(!$default_number) {
      //if voipnumber field is empty then prepopulate with default country code
      $default_number = $default_code;
    }
  }
  //Textfield which shows voipnumber
  $element[$phone_field_key] = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default_number,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 9,
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#attributes' => array('class' => 'phone-field-textfield'),
  );

  //Hidden field which stores real vnid
  $element['real_vnid'] = array(
    '#type' => 'hidden',
    '#value' => $vnid ,
  );

  /*VoIP Number type*/
  $number_types = array(
    VOIPNUMBER_PSTN => t('Landline'),
    VOIPNUMBER_MOBILE => t('Mobile'),
    VOIPNUMBER_SMS => t('SMS only'),
    VOIPNUMBER_WORK => t('Work'),
    VOIPNUMBER_HOME=> t('Home'),
    VOIPNUMBER_FAX => t('Fax'),
  );

  if ($field_settings['voipnumberfield_allow_sip']) {
    //Allow SIP addresses only if set by admin
    $number_types[VOIPNUMBER_SIP] = t('SIP');
  }

  $element['default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Default number'),
    '#default_value' => isset($voipnumber) ? $voipnumber->isDefault() : FALSE,
    '#attributes' => array('class' => 'voipnumber-default'),
  );

  $element['type'] = array(
    '#type' => 'select',
    '#title' => t('Number type'),
    '#options' => $number_types,
    '#default_value' => isset($voipnumber) ? $voipnumber->getType() : VOIPNUMBER_PSTN,
  );

  $countries = voipnumberfield_dialing_codes();
  array_unshift($countries, '<none>');

  $element['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#description' => t('Country this number belongs to. Useful only if you are
     using number with country code which belongs to multiple countries'),
    '#options' => $countries,
    '#default_value' => (isset($voipnumber) && $voipnumber->getCountryName()) ? $voipnumber->getCountryName() : '<none>',
  );

  return $element;
}

function _voipnumberfield_valid_int_phone_number($phonenumber, &$error, $length = '') {
  if (empty($length)) {
    $length = variable_get('voipnumberfield_max_length', 15);
  }
  $phonenumber = trim($phonenumber);
  if ($phonenumber === '') {
    return FALSE;
  }

  $base_phonenumber = str_replace('+', '', $phonenumber);
  if (strlen($base_phonenumber) > $length) {
    $error = t('invalid phone number. Phone number is too long; phone numbers are limited to %length digits.', array('%length' => $length));
    return FALSE;
  }
  // Check if digits are used in the base_phonenumber
  if (!ctype_digit($base_phonenumber)) {
    $error = t('invalid phone number. Phone number contains invalid characters; only allowed characters are numbers and punctuation.');
    return FALSE;
  }

  return TRUE;
}

/**
 * Implementation of hook_user().
 *
 * Add phone field to core user profile
 * //@todo: move to voipusernumber module
 */
 /*
function voipnumberfield_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && $category == 'account' && user_access('use default voip number')) {
    drupal_add_css(drupal_get_path('module', 'voipnumberfield') . '/voipnumberfield.css');
    $form['voipnumberfield'] = array(
      '#title' => t('Default Phone Number'),
      '#type' => 'fieldset',
    );
    $country = voipnumberfield_dialing_codes(4);
    $form['voipnumberfield']['voipnumberfield_country'] = array(
      '#type' => 'select',
      '#title' => 'Country code',
      '#default_value' => $edit['voipnumberfield_country'],
      '#options' => $country,
    );

    $form['voipnumberfield']['voipnumberfield_phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone Number'),
      '#default_value' => $edit['voipnumberfield_phone'],
      '#size' => 9,
    );
    return $form;
  }
  elseif ($op == 'validate' && !empty($edit['voipnumberfield_phone'])) {
    $phonenumber = $edit['voipnumberfield_country'] . $edit['voipnumberfield_phone'];
    if (!empty($edit['voipnumberfield_phone']) && !_voipnumberfield_valid_int_phone_number($phonenumber, $error)) {
      form_set_error('voipnumberfield_phone', t('"%value" is %error', array(
        '%value' => $edit['voipnumberfield_phone'],
        '%error' => $error
      )));
    }
  }
}
*/
/*API Functions*/
function voipnumberfield_dialing_codes() {
  $res = db_query("SELECT * FROM {voipnumber_dialing_codes} ORDER BY country");
  //Return countries with country as key and "country (code)" as value
  while ($country = db_fetch_array($res)) {
    $countries[$country['country']] = $country['country'] . " (" . $country['code'] . ")";
  }
  return $countries;
}
